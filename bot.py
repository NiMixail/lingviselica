import telebot
from telebot import types
from random import choice
from hangman import hangman

cyr = list('–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø-.')

bot = telebot.TeleBot('6797245876:AAHNUyaqLZye2Dx9j2WcwXXK34yna_BcGUA')

keyboard = types.ReplyKeyboardMarkup(row_width=5)
buttons = [types.KeyboardButton(text=letter) for letter in cyr]
keyboard.add(*buttons)

words = {}
with open('dictionary.txt', 'r', encoding='utf-8') as f:
    for line in f:
        words[line.split(' * ')[0]] = line.split(' * ')[1]

w = None

neg = """–ß—ë —Ç–æ —É –≤–∞—Å –º–∏–Ω—É—Å –º–æ–∑–≥.
–î–∞–∂–µ –º—è—Å–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–µ–π, —á–µ–º —Ç—ã.
–í–æ–æ–±—â–µ –Ω–µ people of culture
–í—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ, —Ö—É–¥—à–∏–µ, —Ç–æ–ø -10000.
–í—ã —É–∂–µ —Å–ª–∏–ª–∏—Å—å —Å –±–µ—Ç–æ–Ω–æ–º, –≤—ã –≤–æ–æ–±—â–µ –Ω–µ –ª—é–¥–∏.
–í–æ–¥–∫–∞ –±–µ–∑ –∫–æ–ª—ã - –¥–µ–Ω—å–≥–∏ –Ω–∞ –≤–µ—Ç–µ—Ä.
–ö–æ–ª–ª–µ–≥–∏, –µ—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø–æ–º–Ω–∏—Ç–µ —ç—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –º—ã –≤—Å–µ–º –≤—ã–ø–∏—à–µ–º –∑–∞ —Å—á–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É—á–µ–±–Ω–∏–∫–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ 5 –∫–ª–∞—Å—Å–∞.""".split(
    '\n')

pos = """–Ø –µ–º –¥–µ–¥–æ–≤.
–ú–Ω–µ –ø–æ—Ä–∞ –ø–æ–≤–µ—Å–∏—Ç—å—Å—è. –í–∞–º –≤—Ä–µ–º—è –∑–∞–≤–∞—Ä–∏—Ç—å —á–∞–π.
–•–∞–π–ø–∏–º, —Ö–∞–π–ø–∏–º, —ã—ç—ç—ç‚Ä¶
–ê–±–∞–±—É–±–∞–±—É–±–∞–±–∞–±–∞.
–û—â—É—â–µ–Ω–∏—è - –ê–¢–ê–°!!! –ø–æ–ª–Ω—ã–π –§–ï–§–ï–§–ï!
–ú–Ø–Ø–Ø–Ø–£!
–ö–∞–∫–æ–≥–æ —á—ë—Ä—Ç–∞ —É –≤–∞—Å —ç—Ç–æ —Å–ª–æ–≤–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?
""".split('\n')


def upd(msg, mstks, vw):
    text = f"<code>{hangman[mstks]}</code>\n{vw}"
    if text != msg.text:
        try:
            bot.edit_message_text(chat_id=msg.chat.id,
                                  message_id=msg.message_id,
                                  text=text,
                                  parse_mode='HTML')
        except Exception as e:
            print(e)


@bot.message_handler(commands=['jajemdedov'])
def jajemdedov(message):
    remove_markup = types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, "–∫–∏–Ω—É–≤ –≤–∑–≥–ª—è–¥ –≤ –∑–∞–≥–∞–¥–æ—á–Ω–æ–π –º–µ–∫—Å–∏–∫–∞–Ω—Å–∫–æ–π —à–ª—è–ø–∏, —É–±–∏—Ä–∞—é –∫–Ω–æ–ø–∫–∏ —Å –±—É–∫–≤–∞–º–∏...",
                     reply_markup=remove_markup)


@bot.message_handler(commands=['guess'])
def guess(message):
    global w, view, mistakes, letters, msg
    w = choice(list(words.keys()))
    view = ''.join(i + ' ' if i == ' ' else '_ ' for i in w)
    mistakes = 0
    letters = {c: 7 for c in cyr}  # 7 - not used, 2 - guessed, 1 - wrong

    bot.reply_to(message, text='„Ö§', reply_markup=keyboard)
    msg = bot.reply_to(message, text=f"<code>{hangman[mistakes]}</code>\n{view}", parse_mode='HTML')


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    global w, view, mistakes, letters
    if w and (len(message.text) == 1 or message.text == w) and (message.text.isupper() or not message.text.isalpha()):
        c = message.text
        if c in w:
            if c == w:
                view = ''.join(i + ' ' for i in w)
            if c in letters:
                if letters[c] != 2:
                    letters[c] = 2
                    for i in range(len(w)):
                        if w[i] == c:
                            view = view[:i * 2] + c + ' ' + view[(i + 1) * 2:]
                    upd(msg, mistakes, view)
            if view == ''.join(i + ' ' for i in w):
                bot.reply_to(message,
                             f"{choice(pos)} \n–ë—ã–ª–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥–∞–¥–∞–Ω–æ —Å–ª–æ–≤–æ {w} ‚Äî {words[w]}")
                w = None
        else:
            if c in letters:
                letters[c] = 1
            mistakes += 1
            bot.set_message_reaction(message.chat.id, message.message_id,
                                     [types.ReactionTypeEmoji("üëé")])
            upd(msg, mistakes, view)
            if mistakes == len(hangman) - 1:
                bot.reply_to(message,
                             text=f'{choice(neg)} \n–ë—ã–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ —Å–ª–æ–≤–æ {w} ‚Äî {words[w]}')
                w = None


bot.polling()
